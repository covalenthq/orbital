#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pathname'
require 'rubygems'

project_root = Pathname.new(__dir__).parent.expand_path

gemfile_path = project_root / 'Gemfile'
lockfile_path = project_root / 'Gemfile.lock'
gemspec_path = project_root / 'orbital.gemspec'
vendor_dir = project_root / 'vendor'
lib_dir = project_root / 'lib'

ENV['BUNDLE_GEMFILE'] ||= gemfile_path.to_s
ENV['BUNDLE_PATH'] = vendor_dir.to_s
ENV['BUNDLE_WITHOUT'] = 'development'
ENV['BUNDLE_JOBS'] = '4'

deps_mtime = [gemfile_path, lockfile_path, gemspec_path].map(&:mtime).max

vendor_active_dir =
  if vendor_dir.directory?
    (vendor_dir / 'ruby').children.find{ |f| f.directory? }
  end

unless vendor_active_dir and deps_mtime <= vendor_active_dir.mtime
  Dir.chdir(project_root.to_s) do
    system(ENV, "bundle", "install", "--quiet")
  end
end

require 'bundler/setup'

$:.unshift(lib_dir.to_s) unless $:.include?(lib_dir.to_s)

require 'orbital/cli'

Signal.trap('INT') do
  warn("\n#{caller.join("\n")}: interrupted")
  exit(1)
end

begin
  Orbital::CLI.start
rescue Orbital::CLI::FatalError => err
  $stderr.puts(["\nðŸ›‘ " + err.message].to_flat_string)

  if err.additional_info
    $stderr.write("\n")
    $stderr.puts(err.additional_info.to_flat_string)
  end

  Kernel.exit(1)
end
